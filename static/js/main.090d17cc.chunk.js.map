{"version":3,"sources":["components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","components/ErrorDetection.js","containers/App.js","serviceWorker.js","index.js"],"names":["Card","props","className","alt","src","name","email","CardList","robots","map","element","i","key","SearchBox","searchChange","type","placeholder","onChange","Scroll","style","overflow","border","height","children","ErrorDetection","state","hasError","error","info","this","setState","Component","App","onSearchChange","event","searchField","target","value","fetch","then","response","json","users","filteredRobots","filter","robot","toLowerCase","includes","length","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"2OAceA,EAZH,SAACC,GACZ,OACC,yBAAKC,UAAU,mDACd,yBAAKC,IAAI,QAAQC,IAAG,+BAA0BH,EAAMI,KAAhC,cACpB,6BACC,4BAAKJ,EAAMI,MACX,2BAAIJ,EAAMK,UCQCC,EAbC,SAAC,GAAa,IAAZC,EAAW,EAAXA,OASjB,OANgBA,EAAOC,KAAI,SAACC,EAAQC,GAAT,OAC1B,kBAAC,EAAD,CACAC,IAAKD,EACLN,KAAMG,EAAOG,GAAGN,KAChBC,MAAOE,EAAOG,GAAGL,YCKJO,EAbE,SAAC,GACjB,IADkBC,EACnB,EADmBA,aAElB,OACC,yBAAKZ,UAAU,OACd,2BACAa,KAAK,SACLC,YAAY,gBACZd,UAAU,mCACVe,SAAUH,MCDEI,G,MAPF,SAACjB,GACb,OACC,yBAAKkB,MAAO,CAACC,SAAU,SAAUC,OAAO,kBAAmBC,OAAO,UAChErB,EAAMsB,YCeKC,E,YAhBd,WAAYvB,GACX,IAAD,8BACC,4CAAMA,KACDwB,MAAM,CAACC,UAAS,GAFtB,E,+EAIkBC,EAAMC,GAEvBC,KAAKC,SAAS,CAACJ,UAAS,M,+BAIxB,OAAGG,KAAKJ,MAAMC,SACN,oCACDG,KAAK5B,MAAMsB,a,GAfSQ,aC0CdC,E,YArCd,aAAc,IAAD,8BACZ,+CAYDC,eAAe,SAACC,GACf,EAAKJ,SAAS,CAACK,YAAaD,EAAME,OAAOC,SAZzC,EAAKZ,MAAM,CACVjB,OAAQ,GACR2B,YAAa,IAJF,E,iFAQZ,IAAD,OACCG,MAAM,8CACLC,MAAK,SAAAC,GAAQ,OAAEA,EAASC,UACxBF,MAAK,SAAAG,GAAK,OAAE,EAAKZ,SAAS,CAACtB,OAAOkC,S,+BAM3B,IAAD,EACoBb,KAAKJ,MAAzBjB,EADA,EACAA,OAAO2B,EADP,EACOA,YACRQ,EAAenC,EAAOoC,QAAO,SAAAC,GAClC,OAAOA,EAAMxC,KAAKyC,cAAcC,SAASZ,EAAYW,kBAEtD,OAAqB,IAAlBtC,EAAOwC,OACF,wBAAI9C,UAAU,UAAd,aAER,yBAAKA,UAAU,MACd,wBAAIA,UAAU,MAAd,gBACA,kBAAC,EAAD,CAAWY,aAAce,KAAKI,iBAC9B,kBAAC,EAAD,KACC,kBAAC,EAAD,KACC,kBAAC,EAAD,CAAUzB,OAAQmC,W,GA/BLZ,aCMEkB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCZNC,IAASC,OAAO,kBAAC,EAAD,MAAQC,SAASC,eAAe,SD6H1C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMrB,MAAK,SAAAsB,GACjCA,EAAaC,iB","file":"static/js/main.090d17cc.chunk.js","sourcesContent":["import React from 'react';\n\nconst Card= (props) => {\n\treturn (\n\t\t<div className=\"bg-light-blue dib br3 pa3 ma2 grow bw2 shadow-5\">\n\t\t\t<img alt=\"nigas\" src={`https://robohash.org/${props.name}?125x125`}/>\n\t\t\t<div>\n\t\t\t\t<h2>{props.name}</h2>\n\t\t\t\t<p>{props.email}</p>\n\t\t\t</div>\n\t\t</div>\n\t);\n}\n\nexport default Card;","import React from \"react\"\nimport Card from \"./Card\"\n\nconst CardList= ({robots}) =>{\n\t/*if(true)\n\t\tthrow new Error(\"bruhbruh\");*/\n\tconst robotList=robots.map((element,i)=>\n\t\t<Card \n\t\tkey={i} \n\t\tname={robots[i].name} \n\t\temail={robots[i].email} \n\t\t/>);\n\treturn (\n\t\trobotList\n\t\t);\n}\nexport default CardList;","import React from 'react';\n\nconst SearchBox= ({searchChange})=> \n{\n\treturn(\n\t\t<div className=\"pa2\">\n\t\t\t<input \n\t\t\ttype='search' \n\t\t\tplaceholder=\"search robots\" \n\t\t\tclassName=\"pa3 ba b--green bg-lightest-blue\"\n\t\t\tonChange={searchChange}//every time a key is pressed event gets called that triggers the function of an object: searchChange\n\t\t\t/>\n\t\t</div>\n\t\t);\n}\nexport default SearchBox;","import React from \"react\"\n\nconst Scroll=(props)=>{\n\treturn (\n\t\t<div style={{overflow: \"scroll\", border:\"5px solid black\" ,height:\"800px\"}}>\n\t\t\t{props.children}\n\t\t</div>\n\t\t);\n}\nexport default Scroll;","import React,{Component} from \"react\"\n\nclass ErrorDetection extends Component\n{\n\tconstructor(props)\n\t{\n\t\tsuper(props);\n\t\tthis.state={hasError:false};\n\t}\n\tcomponentDidCatch(error,info)\n\t{\n\t\tthis.setState({hasError:true});\n\t}\n\trender()\n\t{\n\t\tif(this.state.hasError)\n\t\t\treturn <h1>bruh</h1>;\n\t\treturn this.props.children;\n\t}\n}\nexport default ErrorDetection;","import React,{Component} from 'react';\nimport CardList from \"../components/CardList\";\nimport SearchBox from \"../components/SearchBox\"\nimport \"./App.css\"\nimport Scroll from \"../components/Scroll\"\nimport ErrorDetection from \"../components/ErrorDetection\"\nclass App extends Component {\n\tconstructor(){\n\t\tsuper();\n\t\tthis.state={\n\t\t\trobots: [],\n\t\t\tsearchField: \"\"\n\t\t};\n\t}\n\tcomponentDidMount()\n\t{\n\t\tfetch(\"https://jsonplaceholder.typicode.com/users\")\n\t\t.then(response=>response.json())\n\t\t.then(users=>this.setState({robots:users}));\n\t}\n\tonSearchChange=(event)=>{\n\t\tthis.setState({searchField: event.target.value});\n\n\t}\n\trender(){\n\t\tconst {robots,searchField}=this.state;\n\t\tconst filteredRobots=robots.filter(robot=>{\n\t\t\treturn robot.name.toLowerCase().includes(searchField.toLowerCase()); \n\t\t});\n\t\tif(robots.length === 0)\n\t\t\treturn <h1 className=\"tc f1 \"> Loading </h1>;\n\t\treturn(\t\n\t\t<div className=\"tc\">\n\t\t\t<h1 className=\"f1\">RobotFriends</h1>\n\t\t\t<SearchBox searchChange={this.onSearchChange}/>\n\t\t\t<Scroll>\n\t\t\t\t<ErrorDetection>\n\t\t\t\t\t<CardList robots={filteredRobots}/>\n\t\t\t\t</ErrorDetection>\n\t\t\t</Scroll>\n\t\t</div>\n\t\t);\n\t}\n}\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from \"./containers/App\"\nimport * as serviceWorker from './serviceWorker';\nimport \"tachyons\"\nReactDOM.render(<App/>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}